---
layout: post
title:  "Basic Fundamental "
date:   2016-10-01 06:08:02 +0530
---
### Binary Number System - Base-2


 Binary numbers uses only 0 and 1 digits.











### Decimal to Binary
Divide repeatedly by 2, keeping track of the remainders


35710 converts to 1011001012.



### Decimal Numeral System - Base-10
 Decimal numbers uses digits from 0..9.
 These are the regular numbers that we use.

  Eg:
       253810 = 2×103+5×102+3×101+8×100


### Hexadecimal Numeral System - Base-16
 Hex numbers uses digits from 0..9 and A..F.
 H denotes hex prefix.

 Eg:
      2816 = 28H = 2×161+8×160 = 40
      2F16 = 2FH = 2×161+15×160 = 47
      BC1216 = BC12H = 11×163+12×162+1×161+2×160= 48146


### Octal Numeral System - Base-8
 Octal numbers uses digits from 0..7.

  Eg:
278 = 2×81+7×80 = 16+7 = 23
308 = 3×81+0×80 = 24
43078 = 4×83+3×82+0×81+7×80= 2247






Java
============
Java is a programming language expressly designed for use in the distributed environment of the Internet. It was designed to have the "look and feel" of the C++ language, but it is simpler to use than C++ and enforces an object-oriented programming model.




Platform Independent:
> With Java, you can compile source code on Windows and the compiled code (bytecode to be precise) can be executed (interpreted) on any platform running a JVM. So yes you need a JVM but the JVM can run any compiled code, the compiled code is platform independent




How java is Secured ?

> The Bytecode which are generated by the compiler will be tested by the JVM on the execution of the program or we can say every Java Program is under the control of the JVM which checks the code on the runtime many times for viruses and any malicious.



Java Version History

Current stable release of Java is Java SE 8.



High level language vs Low level language

> High level programming languages are languages that uses syntax which close to human languages so, it is easy to understanding the languages. while the low languages programming is languages that close to machine languages such as assembler languages.

Compiler

> A compiler is a software program that transforms high-level source code that is written by a developer in a high-level programming language into a low level object code (binary code) in machine language, which can be understood by the processor. The process of converting high-level programming into machine language is known as compilation.

Linker

> Linker is a computer program that takes one or more object files generated by a compiler and combines them into a single executable file, library file, or another object file.





## JDK Vs JRE Vs JVM


JDK (Java Development Kit) :

JDK = JRE + JVM
JDK contains everything that will be required to develop and run Java application.


## JRE (Java Run time Environment) :

> JRE contains everything required to run Java application which has already been compiled. It doesn’t contain the code library required to develop Java application.


JVM (Java Virtual Machine):

> JVM is a virtual machine which work on top of your operating system to provide a recommended environment for your compiled Java code. JVM only works with bytecode. Hence you need to compile your Java application(.java) so that it can be converted to bytecode format (also known as the .class file).
Which then will be used by JVM to run application. JVM only provide the environment It needs the Java code library to run applications.



Eclipse IDE
============
Eclipse is an integrated development environment (IDE) used in computer programming, and is the most widely used Java IDE.



Creating new Project on Eclipse





Java - Basic Datatypes

Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables. There are two data types available in Java:

Primitive Data Types
Reference/Object Data Types





Note: Non primitive data type will be studied later.

Integer and Float Conversions  
An arithmetic operation between an integer and integer always yields an integer result.
An operation between a float and float always yields a float result.
An operation between an integer and float always yields a float result. In this operation the integer is first promoted to a float and then the operation is performed. Hence the result is float.



Writing on console:
System.out.print(): is used to print message to console window.
 E.g:
                     System.out.print("Hello World");
                     System.out.print("My name is" + foo);
                     System.out.print("Sum of " + a + "and " + b + "is " + c);
                     System.out.print("Total USD is " + usd);
                     a, b, c, usd, foo  are variables of some datatype

Scanner
============

There are various ways to read input from the keyboard, the java.util.Scanner class is one of them. The Java Scanner class breaks the input into tokens using a delimiter that is whitespace by default. It provides many methods to read values of various types.

~~~java
Scanner sc = new Scanner(System.in);

System.out.print("Enter Integer value: ");
int x = sc.nextInt();

System.out.print("Enter Float value: ");
float k = sc.nextFloat();

System.out.print("Enter Double value: ");
double y = sc.nextDouble();

System.out.print("Enter String value: ");
String z = sc.next();

System.out.print("Reading Character input : ");
char c = reader.next().charAt(0);

sc.close();//Closes this scanner.
~~~
# next() vs nextLine():
> next() can read the input only till the space. It can't read two words separated by space. Also, next() places the cursor in the same line after reading the input.
nextLine() reads input including space between the words (that is, it reads till the end of line \n). Once the input is read, nextLine() positions the cursor in the next line.


## Decision Making

if Statement:


if-else statement:



nested if-else statement:
else-if ladder statement:




switch statement:




 Loop Control
while loop:


E.g:
~~~java
public class Test {

   public static void main(String args[]) {
      int x = 10;

      while( x < 20 ) {
         System.out.print("value of x : " + x );
         x++;
         System.out.print("\n");
      }
   }
}
value of x : 10
value of x : 11
value of x : 12
value of x : 13
value of x : 14
value of x : 15
value of x : 16
value of x : 17
value of x : 18
value of x : 19
~~~
E.g:
~~~java
public class Test {

   public static void main(String args[]){
      int x = 10;

      do{
         System.out.print("value of x : " + x );
         x++;
         System.out.print("\n");
      }while( x < 20 );
   }
}
value of x : 10
value of x : 11
value of x : 12
value of x : 13
value of x : 14
value of x : 15
value of x : 16
value of x : 17
value of x : 18
value of x : 19
~~~
for loop:

~~~java
public class Test {

   public static void main(String args[]) {

      for(int x = 10; x < 20; x = x+1) {
         System.out.print("value of x : " + x );
         System.out.print("\n");
      }
   }
}
value of x : 10
value of x : 11
value of x : 12
value of x : 13
value of x : 14
value of x : 15
value of x : 16
value of x : 17
value of x : 18
value of x : 19
~~~
